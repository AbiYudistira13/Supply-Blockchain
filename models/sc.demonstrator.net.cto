
namespace sc.demonstrator.net

asset Company identified by companyId {
    o String companyId
    o String name
    o Double lat  //latitude
    o Double long //longitude
}

abstract asset Product identified by productId {
    o String productId
    --> Company company
    //--> Product[] parts
}

asset Car extends Product {
    o CarStatus status default="ASSEMBLY"
    --> Holder holder
    --> Roof roof optional
    --> Shell shell optional
    o QAReport[] qAReport optional
    o TransportReport transportReport optional
}

asset Roof extends Product {
    o RoofStatus status default="ONSTOCK"
}

asset Shell extends Product {
    o ProductStatus status default="ONSTOCK"
}

asset QAReport identified by qaId {
    o String qaId
    o Boolean lightCheck default=false
    o Boolean hornCheck default=false
}

asset TransportReport identified by transId {
    o String transId
    o String routeHash
    o Boolean tilted default=false
    o Boolean acceleration default=false
    o String vehicle
}

enum CarStatus {
    o ASSEMBLY
    o QA
    o READYFORTRANSPORT
    o TRANSPORT
    o ARRIVED
    o FORSALE
    o SOLD
}

enum ProductStatus {
    o ONSTOCK
    o MOUNTED
}

enum RoofStatus  {
    o ONSTOCK
    o MOUNTED
}

abstract participant User identified by uID {
    o String uID
}

participant Customer extends User {
}

participant Holder extends User {
    --> Company company
}

participant Assembly_holder extends Holder {
    o Double lat
    o Double long
}

participant QA_holder extends Holder {
    o Double lat
    o Double long
}

participant Transport_holder extends Holder {
}

participant Distribution_holder extends Holder {
    o Double lat
    o Double long
}

/*
transaction AlterInformation {
  --> User user
  o String email
}*/

/*
Creates Car, sets CarId
*/
transaction CreateCar {
  o String productId
  --> Holder issuer
  // CarStatus = ASSEMBLY
  // Company company (wird durch issuer bestimmt)
  // Participant holder (wird durch issuer bestimmt)
  // R, S, Q, T
}

/*
Assemble Car and add Roof, Shell
*/
transaction Assembly {
  o Car car
  o Roof roof
}

transaction QACheck {
  o Car car
  o String qaId
  o Boolean lightCheck
  o Boolean hornCheck
  // create QAReport QAReport
  // Participant holder = QA_holder
  // CarStatus status = QA
}

transaction ReadyForTransport {
  o Car car
  o String transId
  // CarStatus status = READYFORTRANSPORT
  // create TransportReport
}

transaction TransportStart {
  o Car car
  // CarStatus status = TRANSPORT
  // Participant holder = Transport_holder
}

transaction SensorStatusUpdate {
    o Car car
    o Boolean tilted
    o Boolean acceleration
}

transaction TransportStop {
  o Car car
  // CarStatus status = ARRIVED
}

transaction TakeOverFromTransport {
  o Car car
  // Participant holder = Distribution_holder
  // CarStatus status = FORSALE
}

transaction Sold {
  o Car car
  // Participant holder = CustomerXY
  // CarStatus status = SOLD
}

/*
event RequestProcessedEvent {
    o String authId
}*/
